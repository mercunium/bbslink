/*                CNet BBSLink Connect  Version 1.2                  */
/*  Written by Link of CheckSum Acknowledged BBS on 3 Feb 2018       */
/*  Used to seamlessly connect a CNet Amiga BBS to the BBSLink.Net   */
/*  door game server.                                                */
/*  This is public domain software.                                  */
/*  Use at your own risk.                                            */

/*  Thanks to Mark Mearns and Dan Fitzgerald for their help.         */

/*  Version 1.1 Changes:                                             */
/*     Script modified to address changes at bbslink.net.  If you    */
/*     are upgrading from version 1.0, the only thing you have to    */
/*     do is replace your version 1.0 'bbslinkconnect' file with     */
/*     this file.  No other changes to your BBS config are           */
/*     needed.                                                       */
/*								     */
/*  Version 1.2 Changes:					     */
/*	Script modified to use http_get instead of httpj.	     */
/*	I did this for my CNET board dreambuilders.fros.com 6800     */
/*	httpj would continually lock-up and crash.  I also added     */
/*	additional debugging to assist with troubleshooting.	     */
/* 	Make sure you have http_get copied to System:.	     	     */
/*	Use at your own risk.	-Fordude				     */
/*								     */
/*								     */

options results;signal on SYNTAX;signal on ERROR;signal on IOERR
PARSE ARG Arguments

/*  Installation Instructions:

1.  Create a folder called 'BBSLink' in your PFiles: directory.   
    Copy this file there.
2.  Download the 'http_get.lha' archive from aminet.net.  You will 
    find it in the comm/tcp section.
3.  Extract the file named 'http_get' from that archive and copy it 
    to System:. 
4.  Modify the access level and add the following command to section 
    2 of your BBSMenu file:

    	DOORLINK         `0-31 | #2 cnet:doors/internet_support/ctelnet games.bbslink.net}
		                 ^^^^^
						   \
						     Access level
		
	Make sure the above path to the ctelnet program is correct for 
	your system.  Reload menus.
5.  Register on bbslink.net as a sysop.  You will receive an email 
    from them with the following info.  Put your information from that
    email into these fields.  Don't forget to include the ticks ' .   */
SystemCode='yoursyscode'
AuthorizationCode='yourauthcode'
SchemeCode='yourschemecode'

/*
6.  For every Door you want to run, add an Arexx Door PFile entry for this script.
    You will find a list of Doors at www.bbslink.net/sysop.  Each door has a code associated.  
	That door code will be the argument portion of the PFile entry.  For example, you would 
	use the argument 'lord' for Legend of the Red Dragon.  Set the access level for the door 
	before you save the settings.  Included in this archive is a JPG image of an example 
	PFile entry.
7.  That's it!  Enjoy the best the PC world has to offer in BBS Doors.
*/

/* Output Display for diagnostics:*/
/* 0=No output as script runs,    */
/* 1=Dots show as script runs     */
/* 2=Full verbosity               */
Verbosity=0

/* Directory where this file is located, also used for http page requests. */
bbslinkdir='Pfiles:bbslink'

changewhere "BBSLink" 


/* Variable setup */
tr=transmit;se=sendstring;gc=getchar;gu=getuser
a="rexxsupport.library";if ~show("l",a) then if ~addlib(a,0,-30) then exit

/* Check the bbsmenu for DOORLINK */
if strip(Arguments) = '' then do
	tr 'No door argument configured for the PFile Entry.  See instructions.'
	exit
end

gu 1;Name = Result;Zname = Space(Name,0)    
gu 40;UDI = space(result ,0)
If Verbosity=2 then
	tr 'Generating random key...'
if Verbosity=1 then
	se 'Loading.'

/* Generate a random key */
a=random(,,time("s"))
r1 = random(0,9)
r2 = random(0,9)
r3 = random(0,9)
r4 = random(0,9)
r5 = random(0,9)
r6 = random(0,9)

/* Assemble the Token Request URL */
key=r1 || r2 || r3 || r4 || r5 || r6
rcd='http://games.bbslink.net/token.php?key=' || key

/* Delete the last results file in case it wasn't deleted last time */
delcommand = 'run >nil: delete ' || bbslinkdir || '/user' || UDI 
address command delcommand

/* Fetch the token from BBSLink and save.  token valid for 15 seconds */
httpcmd = 'run >nil: http_get "' || rcd || '" > ' || bbslinkdir || '/user' || UDI
address command httpcmd

/* need a short delay to allow our http_get program to fetch the results */
call delay(50) 

	tr 'Reading token from html..'
	if Verbosity=2 then
		tr 'File Location: 'bbslinkdir'/user'UDI
	if Verbosity=2 then
        	tr 'Key value: 'key
	if Verbosity=1 then	
		tr '.'

/* Read the token from BBSLink html page */
filein = bbslinkdir || '/user' || UDI 
ktoken=''
if open(temp,filein,R) then
	do
		do while ~eof(temp)
			data = readln(temp)
			if data ~= '' then 
				do 
					ktoken=data
					if Verbosity=2 then
						tr 'Token received.'	
					if Verbosity=2 then
						tr 'Token value: 'ktoken
					if Verbosity=1 then
						se '.'
				end 
		end
		call close(temp)
	end
else
	do
		tr 'Unable to open token file. Exiting.'
		exit 
	end 
	
/* Check to see if we got the token */
if ktoken='' then 
	do
		tr 'Did not receive token. Exiting.'
		exit 
	end 
	
if verbosity=2 then 
	tr 'Calculating Hashes...'
if verbosity=1 then
	se '.'

/*  Assemble the Authentication Request URL */
xUser='user=' || UDI 
xSystem='system=' || SystemCode
xAuth='auth=' || MD5(AuthorizationCode || ktoken)
xCode='scheme=' || MD5(SchemeCode || ktoken)
xRows='rows=24'
xKey='key=' || key
xToken='token=' || ktoken
xType='type=amiga'
xVersion='version=1.2'
xDoor='door=' || Arguments
and = '&'
rcd = 'http://games.bbslink.net/auth.php?key=' || key || and || xuser || and || xSystem || and || xAuth || and || xCode || and || xRows || and || xKey || and || xDoor || and || xToken || and || xType || and || xVersion

if verbosity=2 then
	tr 'Requesting authorization from BBSLink...'
if verbosity=2 then
	tr 'Auth request URL: 'rcd
if verbosity=1 then 
	se '.'
	
/* Delete the last results file in case it wasn't deleted last time */
delcommand = 'run >nil: delete ' || bbslinkdir || '/user' || UDI 
address command delcommand

/* Fetch the authorization request */
httpcmd = 'run >nil: http_get "' || rcd || '" > ' || bbslinkdir || '/user' || UDI
address command httpcmd

/* need a short delay to allow our http_get program to fetch the results */
call delay(50)

/* Read the Authentication Request html file */
filein = bbslinkdir || '/user' || UDI 
rundoor=0
if open(temp,filein,R) then
	do
		do while ~eof(temp)
			data = readln(temp)
			if data='complete' then rundoor=1
		end
		call close(temp)
	end

/* Delete the results file */
delcommand = 'run >nil: delete ' || bbslinkdir || '/user' || UDI 
address command delcommand

/* And launch CTelnet if we were authorized */
if rundoor=1 then 
	/* Using command stacking to exit (Q) the telnet program when 
	   the door closes.  Thanks Dan! */
	tr '& DOORLINK;Q}'  
if rundoor=0 then
	tr 'Error: ' || data
exit

BREAK_C:
	do f=1 to 5
		if show(p,"http_get." || f) then call closeport("http_get." || f)
		say "PORT http_get." || f "closed."
	end

exit

/* This function makes a MD5 digest checksum from a given string */
/*                                                               */
/* ARexxMD5.rexx by AmigaPhil  Well, almost, as I wrote it from  */
/*                             examples I found on Internet. :-) */
/*                                                               */
/* A big thanks to Bernd Gollesch (on AmigaWorld.net) for having */
/* helped me to fix the script (signed integer issue) !!!        */
/*                                                               */
/* Do what you want with this script, but be warned that it can  */
/* be very slow (especially with long strings) !  If you need a  */
/* faster MD5 message digest algorithm, pick one of the binary   */
/* executable available on Aminet (http://www.aminet.net).       */

md5: procedure

   parse arg stuff

   numeric digits 11
   lenstuff=length(stuff)

   c0=myd2c(0)
   c1=myd2c(128)
   c1a=myd2c(255)
   c1111=c1a||c1a||c1a||c1a
   slen=length(stuff)*8
   slen512=slen//512

   /* pad message to multiple of 512 bits.  Last 2 words are 64 bit # bits in message*/
   if slen512=448 then  addme=512
   if slen512<448 then addme=448-slen512
   if slen512>448 then addme=960-slen512
   addwords=addme/8

   apad=c1||copies(c0,addwords-1)

   xlen=reverse(right(myd2c(lenstuff*8),4,c0))||c0||c0||c0||c0  /* 2**32 max bytes in message */

   /* NEWSTUFF is the message to be md5'ed */
   newstuff=stuff||apad||xlen

   /* starting values of registers */
   a ='67452301'x;
   b ='efcdab89'x;
   c ='98badcfe'x;
   d ='10325476'x;

   lennews=length(newstuff)/4

   /* loop through entire message */
   do i1 = 0 to ((lennews/16)-1)
   i16=i1*64
   do j=1 to 16
       j4=((j-1)*4)+1
       jj=i16+j4
       m.j=reverse(substr(newstuff,jj,4))
   end /* do */

   /* transform this block of 16 chars to 4 values. Save prior values first */
   aa=a;bb=b;cc=c;dd=d

   /* do 4 rounds, 16 operations per round (rounds differ in bit'ing functions */
   S11=7
   S12=12
   S13=17
   S14=22
   a=round1( a, b, c, d,   0 , S11, 3614090360); /* 1 */
   d=round1( d, a, b, c,   1 , S12, 3905402710); /* 2 */
   c=round1( c, d, a, b,   2 , S13,  606105819); /* 3 */
   b=round1( b, c, d, a,   3 , S14, 3250441966); /* 4 */
   a=round1( a, b, c, d,   4 , S11, 4118548399); /* 5 */
   d=round1( d, a, b, c,   5 , S12, 1200080426); /* 6 */
   c=round1( c, d, a, b,   6 , S13, 2821735955); /* 7 */
   b=round1( b, c, d, a,   7 , S14, 4249261313); /* 8 */
   a=round1( a, b, c, d,   8 , S11, 1770035416); /* 9 */
   d=round1( d, a, b, c,   9 , S12, 2336552879); /* 10 */
   c=round1( c, d, a, b,  10 , S13, 4294925233); /* 11 */
   b=round1( b, c, d, a,  11 , S14, 2304563134); /* 12 */
   a=round1( a, b, c, d,  12 , S11, 1804603682); /* 13 */
   d=round1( d, a, b, c,  13 , S12, 4254626195); /* 14 */
   c=round1( c, d, a, b,  14 , S13, 2792965006); /* 15 */
   b=round1( b, c, d, a,  15 , S14, 1236535329); /* 16 */

   /* Round 2 */
   S21=5
   S22=9
   S23=14
   S24=20
   a= round2( a, b, c, d,   1 , S21, 4129170786); /* 17 */
   d= round2( d, a, b, c,   6 , S22, 3225465664); /* 18 */
   c=  round2( c, d, a, b,  11 , S23,  643717713); /* 19 */
   b=  round2( b, c, d, a,   0 , S24, 3921069994); /* 20 */
   a=  round2( a, b, c, d,   5 , S21, 3593408605); /* 21 */
   d=  round2( d, a, b, c,  10 , S22,   38016083); /* 22 */
   c=  round2( c, d, a, b,  15 , S23, 3634488961); /* 23 */
   b= round2( b, c, d, a,   4 , S24, 3889429448); /* 24 */
   a= round2( a, b, c, d,   9 , S21,  568446438); /* 25 */
   d= round2( d, a, b, c,  14 , S22, 3275163606); /* 26 */
   c=  round2( c, d, a, b,   3 , S23, 4107603335); /* 27 */
   b=  round2( b, c, d, a,   8 , S24, 1163531501); /* 28 */
   a=  round2( a, b, c, d,  13 , S21, 2850285829); /* 29 */
   d=  round2( d, a, b, c,   2 , S22, 4243563512); /* 30 */
   c=  round2( c, d, a, b,   7 , S23, 1735328473); /* 31 */
   b= round2( b, c, d, a,  12 , S24, 2368359562); /* 32 */

   /* Round 3 */
   S31= 4
   S32= 11
   S33= 16
   S34= 23
   a= round3( a, b, c, d,   5 , S31, 4294588738); /* 33 */
   d=  round3( d, a, b, c,   8 , S32, 2272392833); /* 34 */
   c=  round3( c, d, a, b,  11 , S33, 1839030562); /* 35 */
   b=  round3( b, c, d, a,  14 , S34, 4259657740); /* 36 */
   a=  round3( a, b, c, d,   1 , S31, 2763975236); /* 37 */
   d=  round3( d, a, b, c,   4 , S32, 1272893353); /* 38 */
   c=  round3( c, d, a, b,   7 , S33, 4139469664); /* 39 */
   b=  round3( b, c, d, a,  10 , S34, 3200236656); /* 40 */
   a=  round3( a, b, c, d,  13 , S31,  681279174); /* 41 */
   d=  round3( d, a, b, c,   0 , S32, 3936430074); /* 42 */
   c=  round3( c, d, a, b,   3 , S33, 3572445317); /* 43 */
   b=  round3( b, c, d, a,   6 , S34,   76029189); /* 44 */
   a=  round3( a, b, c, d,   9 , S31, 3654602809); /* 45 */
   d=  round3( d, a, b, c,  12 , S32, 3873151461); /* 46 */
   c=  round3( c, d, a, b,  15 , S33,  530742520); /* 47 */
   b=  round3( b, c, d, a,   2 , S34, 3299628645); /* 48 */

   /* Round 4 */
   S41=6
   S42=10
   S43=15
   s44=21
   a=round4( a, b, c, d,   0 , S41, 4096336452); /* 49 */
   d=round4( d, a, b, c,   7 , S42, 1126891415); /* 50 */
   c=round4( c, d, a, b,  14 , S43, 2878612391); /* 51 */
   b=round4( b, c, d, a,   5 , s44, 4237533241); /* 52 */
   a=round4( a, b, c, d,  12 , S41, 1700485571); /* 53 */
   d=round4( d, a, b, c,   3 , S42, 2399980690); /* 54 */
   c=round4( c, d, a, b,  10 , S43, 4293915773); /* 55 */
   b=round4( b, c, d, a,   1 , s44,  2240044497); /* 56 */
   a=round4( a, b, c, d,   8 , S41, 1873313359); /* 57 */
   d=round4( d, a, b, c,  15 , S42, 4264355552); /* 58 */
   c=round4( c, d, a, b,   6 , S43, 2734768916); /* 59 */
   b=round4( b, c, d, a,  13 , s44, 1309151649); /* 60 */
   a=round4( a, b, c, d,   4 , S41, 4149444226); /* 61 */
   d=round4( d, a, b, c,  11 , S42, 3174756917); /* 62 */
   c=round4( c, d, a, b,   2 , S43,  718787259); /* 63 */
   b=round4( b, c, d, a,   9 , s44, 3951481745); /* 64 */


   a=m32add(aa,a) ; b=m32add(bb,b) ; c=m32add(cc,c) ; d=m32add(dd,d)

   end

   aa=c2x(reverse(a))||c2x(reverse(b))||c2x(reverse(C))||c2x(reverse(D))



   /*--- return MD5 ---------------------------------------------------------*/
   return translate(aa,'abcdef','ABCDEF')


/*===========================================================================*/
round1: procedure expose m. c1111 c0
/*===========================================================================*/
   parse arg a1,b1,c1,d1,kth,shift,sini
   kth=kth+1
   t1=myc2d(a1)+myc2d(f(b1,c1,d1))+ myc2d(m.kth) + sini
   t1a=right(myd2c(t1),4,c0)
   t2=rotleft(t1a,shift)
   t3=m32add(t2,b1)
   return t3

/*===========================================================================*/
round2: procedure expose m. c1111 c0
/*===========================================================================*/
   parse arg a1,b1,c1,d1,kth,shift,sini
   kth=kth+1
   t1=myc2d(a1)+myc2d(g(b1,c1,d1))+ myc2d(m.kth) + sini
   t1a=right(myd2c(t1),4,c0)
   t2=rotleft(t1a,shift)
   t3=m32add(t2,b1)
   return t3

/*===========================================================================*/
round3: procedure expose m. c1111 c0
/*===========================================================================*/
   parse arg a1,b1,c1,d1,kth,shift,sini
   kth=kth+1
   t1=myc2d(a1)+myc2d(h(b1,c1,d1))+ myc2d(m.kth) + sini
   t1a=right(myd2c(t1),4,c0)
   t2=rotleft(t1a,shift)
   t3=m32add(t2,b1)
   return t3

/*===========================================================================*/
round4: procedure expose m. c1111 c0
/*===========================================================================*/
   parse arg a1,b1,c1,d1,kth,shift,sini
   kth=kth+1
   t1=myc2d(a1)+myc2d(i(b1,c1,d1))+ myc2d(m.kth) + sini
   t1a=right(myd2c(t1),4,c0)
   t2=rotleft(t1a,shift)
   t3=m32add(t2,b1)
   return t3

/*===========================================================================*/
m32add: procedure expose c0
/* add to "char" numbers, modulo 2**32, return as char                       */
/*===========================================================================*/
   parse arg v1,v2
   t1=myc2d(v1)+myc2d(v2)
   t2=myd2c(t1)
   t3=right(t2,4,c0)
   return t3

/*===========================================================================*/
f: procedure expose c1111
/* F(x, y, z) == (((x) & (y)) | ((~x) & (z)))                                */
/*===========================================================================*/
   parse arg x,y,z
   t1=bitand(x,y)
   notx=bitxor(x,c1111)
   t2=bitand(notx,z)
   return bitor(t1,t2)

/*===========================================================================*/
g: procedure expose c1111
/* G(x, y, z) == (((x) & (z)) | ((y) & (~z)))*/
/*===========================================================================*/
   parse arg x,y,z
   t1=bitand(x,z)
   notz=bitxor(z,c1111)
   t2=bitand(y,notz)
   return bitor(t1,t2)

/*===========================================================================*/
h: procedure
/* H(x, y, z) == ((x) ^ (y) ^ (z)) */
/*===========================================================================*/
   parse arg x,y,z
   t1=bitxor(x,y)
   return bitxor(t1,z)

/*===========================================================================*/
i: procedure expose c1111
/* I(x, y, z) == ((y) ^ ((x) | (~z))) */
/*===========================================================================*/
   parse arg x,y,z
   notz=bitxor(z,c1111)
   t2=bitor(x,notz)
   return bitxor(y,t2)

/*===========================================================================*/
rotleft: procedure
/* bit rotate to the left by s positions                                     */
/*===========================================================================*/
   parse arg achar,s
   if s=0 then return achar

   bits=myx2b(c2x(achar))
   lb=length(bits)
   t1=left(bits,s)
   t2=bits||t1
   yib=right(t2,lb)
   return x2c(myb2x(yib))

/*===========================================================================*/
myc2d: procedure expose c0
/* c2d() replacement to "fix" signed integer                                 */
/*===========================================================================*/
parse arg val
val = right(val, 4, c0)
val_high = left(val, 2)
val_low = right(val, 2)
res = c2d(val_high)*65536 + c2d(val_low)
return res

/*===========================================================================*/
myd2c: procedure expose c0
/* d2c() replacement to "fix" signed integer                                 */
/*===========================================================================*/
parse arg val
if val > 2147483647 then
res = right(d2c(val%65536),2,c0) || right(d2c(val//65536),2,c0)
else
res=d2c(val)
return res

/*===========================================================================*/
myx2b: procedure
/* implement x2b() function if missing (like in ARexx, Rexx for Amiga)       */
/*===========================================================================*/
parse arg val
parse version rexxver
if left(rexxver,5) = 'ARexx' then return c2b(x2c(val))
return x2b(val)

/*===========================================================================*/
myb2x: procedure
/* implement b2x() function if missing (like in ARexx, Rexx for Amiga)       */
/*===========================================================================*/
parse arg val
parse version rexxver
if left(rexxver,5) = 'ARexx' then return c2x(b2c(val))
return b2x(val)


SYNTAX:
ERROR:
IOERR:
	e1="n1 Error: "rc" ("errortext(rc)")"
	e2="  Line: "left(sigl,4)"File:"
	c="`"fp", "ver"'"
	e2=e2" "c
	tr e1
	tr e2
	logentry e1
	logentry e2
	e=strip(translate(sourceline(sigl),"\{",""))
	do while e~=""
		e3="Source: "left(e,37)
		tr e3
		logentry e3
		e=substr(e,38)
		end
	bufferflush
	exit
/**************************************************************************\
\****************** CheckSum Acknowledged BBS telnet://24.225.22.26:2600 **/
